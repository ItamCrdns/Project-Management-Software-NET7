// <auto-generated />
using System;
using CompanyPMO_.NET.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CompanyPMO_.NET.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240510092709_employee-workload")]
    partial class employeeworkload
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CompanyPMO_.NET.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street_address");

                    b.HasKey("AddressId");

                    b.ToTable("addresses");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            City = "Faketown",
                            Country = "Fake Country",
                            PostalCode = "12345",
                            State = "FS",
                            StreetAddress = "123 Fake Street"
                        },
                        new
                        {
                            AddressId = 2,
                            City = "Fakecity",
                            Country = "Fake Country",
                            PostalCode = "67890",
                            State = "FC",
                            StreetAddress = "456 Fake Avenue"
                        },
                        new
                        {
                            AddressId = 3,
                            City = "Fakeville",
                            Country = "Fake Country",
                            PostalCode = "11122",
                            State = "FV",
                            StreetAddress = "789 Fake Boulevard"
                        });
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.Changelog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("log_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogId"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entity_type");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("new_data");

                    b.Property<string>("OldData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("old_data");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("operation");

                    b.HasKey("LogId");

                    b.ToTable("changelog");
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompanyId"));

                    b.Property<int?>("AddedById")
                        .HasColumnType("integer")
                        .HasColumnName("added_by_id");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<int?>("CeoUserId")
                        .HasColumnType("integer")
                        .HasColumnName("ceo_user_id");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("contact_phone_number");

                    b.Property<DateTime>("LatestProjectCreation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("latest_project_creation");

                    b.Property<string>("Logo")
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("CompanyId");

                    b.ToTable("companies");

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            AddedById = 1,
                            AddressId = 1,
                            CeoUserId = 1,
                            ContactEmail = "fake1@example.com",
                            ContactPhoneNumber = "1234567890",
                            LatestProjectCreation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fake Company 1"
                        },
                        new
                        {
                            CompanyId = 2,
                            AddedById = 2,
                            AddressId = 2,
                            CeoUserId = 2,
                            ContactEmail = "fake2@example.com",
                            ContactPhoneNumber = "0987654321",
                            LatestProjectCreation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fake Company 2"
                        },
                        new
                        {
                            CompanyId = 3,
                            AddedById = 3,
                            AddressId = 3,
                            CeoUserId = 3,
                            ContactEmail = "fake3@example.com",
                            ContactPhoneNumber = "1231231231",
                            LatestProjectCreation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fake Company 3"
                        });
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmployeeId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockedEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("locked_until");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("login_attempts");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<DateTime?>("PasswordVerified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("password_verified");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("integer")
                        .HasColumnName("supervisor_id");

                    b.Property<int>("TierId")
                        .HasColumnType("integer")
                        .HasColumnName("tier_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<string>("Workload")
                        .HasColumnType("text")
                        .HasColumnName("workload");

                    b.HasKey("EmployeeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("TierId");

                    b.ToTable("employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            CompanyId = 1,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 410, DateTimeKind.Utc).AddTicks(8461),
                            Email = "employee1@example.com",
                            FirstName = "First",
                            Gender = "Male",
                            LastName = "Employee",
                            LockedEnabled = false,
                            LoginAttempts = 0,
                            Password = "$2a$11$zJbUnUzRZEV/GPHd1Vfwf.fJgW3YrFYDF.Jy5leo/ecqqiWhsMiWS",
                            PhoneNumber = "1234567890",
                            Role = "supervisor",
                            TierId = 1,
                            Username = "FakeEmployee1"
                        },
                        new
                        {
                            EmployeeId = 2,
                            CompanyId = 2,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(5555),
                            Email = "employee2@example.com",
                            FirstName = "Second",
                            Gender = "Female",
                            LastName = "Employee",
                            LockedEnabled = false,
                            LoginAttempts = 0,
                            Password = "$2a$11$fXAmj0o50YYkpYclWtUtF.WXUDX9sM5rVCLyDN5UiCo6kHwFU8u4e",
                            PhoneNumber = "0987654321",
                            Role = "employee",
                            SupervisorId = 1,
                            TierId = 2,
                            Username = "FakeEmployee2"
                        });
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.EmployeeIssue", b =>
                {
                    b.Property<int>("RelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("relation_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RelationId"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<int>("IssueId")
                        .HasColumnType("integer")
                        .HasColumnName("issue_id");

                    b.HasKey("RelationId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IssueId");

                    b.ToTable("employeeissues");

                    b.HasData(
                        new
                        {
                            RelationId = 1,
                            EmployeeId = 2,
                            IssueId = 4
                        },
                        new
                        {
                            RelationId = 2,
                            EmployeeId = 2,
                            IssueId = 5
                        });
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.EmployeeProject", b =>
                {
                    b.Property<int>("RelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("relation_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RelationId"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.HasKey("RelationId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("employeeprojects");

                    b.HasData(
                        new
                        {
                            RelationId = 1,
                            EmployeeId = 2,
                            ProjectId = 1
                        },
                        new
                        {
                            RelationId = 2,
                            EmployeeId = 2,
                            ProjectId = 2
                        },
                        new
                        {
                            RelationId = 3,
                            EmployeeId = 2,
                            ProjectId = 3
                        });
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.EmployeeTask", b =>
                {
                    b.Property<int>("RelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("relation_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RelationId"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.HasKey("RelationId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TaskId");

                    b.ToTable("employeetasks");

                    b.HasData(
                        new
                        {
                            RelationId = 1,
                            EmployeeId = 2,
                            TaskId = 4
                        },
                        new
                        {
                            RelationId = 2,
                            EmployeeId = 2,
                            TaskId = 5
                        },
                        new
                        {
                            RelationId = 3,
                            EmployeeId = 2,
                            TaskId = 6
                        });
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ImageId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entity_type");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("public_id");

                    b.Property<int>("UploaderId")
                        .HasColumnType("integer")
                        .HasColumnName("uploader_id");

                    b.HasKey("ImageId");

                    b.HasIndex("EntityId");

                    b.ToTable("images");
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.Issue", b =>
                {
                    b.Property<int>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("issue_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IssueId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expected_delivery_date");

                    b.Property<DateTime?>("Finished")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished");

                    b.Property<int>("IssueCreatorId")
                        .HasColumnType("integer")
                        .HasColumnName("issue_creator_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("StartedWorking")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_working");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.HasKey("IssueId");

                    b.HasIndex("IssueCreatorId");

                    b.HasIndex("TaskId");

                    b.ToTable("issues");

                    b.HasData(
                        new
                        {
                            IssueId = 1,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6154),
                            Description = "Description for Issue 1",
                            Finished = new DateTime(2024, 5, 17, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6155),
                            IssueCreatorId = 1,
                            Name = "Issue 1",
                            StartedWorking = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6155),
                            TaskId = 1
                        },
                        new
                        {
                            IssueId = 2,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6158),
                            Description = "Description for Issue 2",
                            Finished = new DateTime(2024, 5, 17, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6159),
                            IssueCreatorId = 1,
                            Name = "Issue 2",
                            StartedWorking = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6158),
                            TaskId = 2
                        },
                        new
                        {
                            IssueId = 3,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6160),
                            Description = "Description for Issue 3",
                            Finished = new DateTime(2024, 5, 17, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6161),
                            IssueCreatorId = 1,
                            Name = "Issue 3",
                            StartedWorking = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6161),
                            TaskId = 4
                        },
                        new
                        {
                            IssueId = 4,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6163),
                            Description = "Description for Issue 4",
                            Finished = new DateTime(2024, 5, 17, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6164),
                            IssueCreatorId = 1,
                            Name = "Issue 4",
                            StartedWorking = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6163),
                            TaskId = 6
                        },
                        new
                        {
                            IssueId = 5,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6165),
                            Description = "Description for Issue 5",
                            Finished = new DateTime(2024, 5, 17, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6166),
                            IssueCreatorId = 1,
                            Name = "Issue 5",
                            StartedWorking = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6165),
                            TaskId = 9
                        });
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("notification_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer")
                        .HasColumnName("receiver_id");

                    b.Property<int?>("SenderId")
                        .HasColumnType("integer")
                        .HasColumnName("sender_id");

                    b.HasKey("NotificationId");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expected_delivery_date");

                    b.Property<DateTime?>("Finished")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished");

                    b.Property<DateTime>("LatestTaskCreation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("latest_task_creation");

                    b.Property<string>("Lifecycle")
                        .HasColumnType("text")
                        .HasColumnName("lifecycle");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<int>("ProjectCreatorId")
                        .HasColumnType("integer")
                        .HasColumnName("project_creator_id");

                    b.Property<DateTime?>("StartedWorking")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_working");

                    b.HasKey("ProjectId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProjectCreatorId");

                    b.ToTable("projects");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            CompanyId = 1,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(5981),
                            Description = "Description for Project 1",
                            ExpectedDeliveryDate = new DateTime(2024, 6, 9, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(5982),
                            LatestTaskCreation = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(5990),
                            Lifecycle = "Planning",
                            Name = "Project 1",
                            Priority = 1,
                            ProjectCreatorId = 1
                        },
                        new
                        {
                            ProjectId = 2,
                            CompanyId = 2,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(5992),
                            Description = "Description for Project 2",
                            ExpectedDeliveryDate = new DateTime(2024, 7, 9, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(5992),
                            LatestTaskCreation = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(5993),
                            Lifecycle = "Development",
                            Name = "Project 2",
                            Priority = 2,
                            ProjectCreatorId = 1
                        },
                        new
                        {
                            ProjectId = 3,
                            CompanyId = 3,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(5994),
                            Description = "Description for Project 3",
                            ExpectedDeliveryDate = new DateTime(2024, 8, 8, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(5995),
                            LatestTaskCreation = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(5996),
                            Lifecycle = "Testing",
                            Name = "Project 3",
                            Priority = 3,
                            ProjectCreatorId = 1
                        });
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.ResetPasswordRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("request_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RequestId"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<Guid>("RequestGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("request_guid");

                    b.Property<int?>("Token")
                        .HasColumnType("integer")
                        .HasColumnName("token");

                    b.Property<DateTime?>("TokenExpiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("token_expiry");

                    b.HasKey("RequestId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("resetpasswordrequests");
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expected_delivery_date");

                    b.Property<DateTime?>("Finished")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished");

                    b.Property<DateTime>("LatestIssueCreation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("latest_issue_creation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<DateTime?>("StartedWorking")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_working");

                    b.Property<int>("TaskCreatorId")
                        .HasColumnType("integer")
                        .HasColumnName("task_creator_id");

                    b.HasKey("TaskId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskCreatorId");

                    b.ToTable("tasks");

                    b.HasData(
                        new
                        {
                            TaskId = 1,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6017),
                            Description = "Description for Task 1",
                            LatestIssueCreation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Task 1",
                            ProjectId = 1,
                            TaskCreatorId = 1
                        },
                        new
                        {
                            TaskId = 2,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6019),
                            Description = "Description for Task 2",
                            LatestIssueCreation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Task 2",
                            ProjectId = 1,
                            TaskCreatorId = 1
                        },
                        new
                        {
                            TaskId = 3,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6020),
                            Description = "Description for Task 3",
                            LatestIssueCreation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Task 3",
                            ProjectId = 1,
                            TaskCreatorId = 1
                        },
                        new
                        {
                            TaskId = 4,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6022),
                            Description = "Description for Task 4",
                            LatestIssueCreation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Task 4",
                            ProjectId = 2,
                            TaskCreatorId = 1
                        },
                        new
                        {
                            TaskId = 5,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6023),
                            Description = "Description for Task 5",
                            LatestIssueCreation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Task 5",
                            ProjectId = 2,
                            TaskCreatorId = 1
                        },
                        new
                        {
                            TaskId = 6,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6024),
                            Description = "Description for Task 6",
                            LatestIssueCreation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Task 6",
                            ProjectId = 2,
                            TaskCreatorId = 1
                        },
                        new
                        {
                            TaskId = 7,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6125),
                            Description = "Description for Task 7",
                            LatestIssueCreation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Task 7",
                            ProjectId = 3,
                            TaskCreatorId = 1
                        },
                        new
                        {
                            TaskId = 8,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6127),
                            Description = "Description for Task 8",
                            LatestIssueCreation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Task 8",
                            ProjectId = 3,
                            TaskCreatorId = 1
                        },
                        new
                        {
                            TaskId = 9,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 537, DateTimeKind.Utc).AddTicks(6128),
                            Description = "Description for Task 9",
                            LatestIssueCreation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Task 9",
                            ProjectId = 3,
                            TaskCreatorId = 1
                        });
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.Tier", b =>
                {
                    b.Property<int>("TierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tier_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TierId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Duty")
                        .HasColumnType("text")
                        .HasColumnName("duty");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("TierId");

                    b.ToTable("tiers");

                    b.HasData(
                        new
                        {
                            TierId = 1,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 283, DateTimeKind.Utc).AddTicks(2147),
                            Duty = "Duty for Supervisor",
                            Name = "Supervisor"
                        },
                        new
                        {
                            TierId = 2,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 283, DateTimeKind.Utc).AddTicks(2148),
                            Duty = "Duty for Employee",
                            Name = "Employee"
                        });
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 283, DateTimeKind.Utc).AddTicks(1759),
                            FirstName = "First",
                            Gender = "Male",
                            LastLogin = new DateTime(2024, 5, 10, 9, 27, 9, 283, DateTimeKind.Utc).AddTicks(1762),
                            LastName = "User",
                            Username = "User1"
                        },
                        new
                        {
                            UserId = 2,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 283, DateTimeKind.Utc).AddTicks(1765),
                            FirstName = "Second",
                            Gender = "Female",
                            LastLogin = new DateTime(2024, 5, 10, 9, 27, 9, 283, DateTimeKind.Utc).AddTicks(1765),
                            LastName = "User",
                            Username = "User2"
                        },
                        new
                        {
                            UserId = 3,
                            Created = new DateTime(2024, 5, 10, 9, 27, 9, 283, DateTimeKind.Utc).AddTicks(1766),
                            FirstName = "Third",
                            Gender = "Male",
                            LastLogin = new DateTime(2024, 5, 10, 9, 27, 9, 283, DateTimeKind.Utc).AddTicks(1767),
                            LastName = "User",
                            Username = "User3"
                        });
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.Employee", b =>
                {
                    b.HasOne("CompanyPMO_.NET.Models.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyPMO_.NET.Models.Employee", "Supervisor")
                        .WithMany("Employees")
                        .HasForeignKey("SupervisorId");

                    b.HasOne("CompanyPMO_.NET.Models.Tier", "Tier")
                        .WithMany()
                        .HasForeignKey("TierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Supervisor");

                    b.Navigation("Tier");
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.EmployeeIssue", b =>
                {
                    b.HasOne("CompanyPMO_.NET.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyPMO_.NET.Models.Issue", null)
                        .WithMany()
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.EmployeeProject", b =>
                {
                    b.HasOne("CompanyPMO_.NET.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyPMO_.NET.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.EmployeeTask", b =>
                {
                    b.HasOne("CompanyPMO_.NET.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyPMO_.NET.Models.Task", null)
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.Image", b =>
                {
                    b.HasOne("CompanyPMO_.NET.Models.Company", "Company")
                        .WithMany("Images")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyPMO_.NET.Models.Project", "Project")
                        .WithMany("Images")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyPMO_.NET.Models.Task", "Task")
                        .WithMany("Images")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Project");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.Issue", b =>
                {
                    b.HasOne("CompanyPMO_.NET.Models.Employee", "IssueCreator")
                        .WithMany()
                        .HasForeignKey("IssueCreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyPMO_.NET.Models.Task", "Task")
                        .WithMany("Issues")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IssueCreator");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.Project", b =>
                {
                    b.HasOne("CompanyPMO_.NET.Models.Company", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyPMO_.NET.Models.Employee", "ProjectCreator")
                        .WithMany()
                        .HasForeignKey("ProjectCreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ProjectCreator");
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.ResetPasswordRequest", b =>
                {
                    b.HasOne("CompanyPMO_.NET.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.Task", b =>
                {
                    b.HasOne("CompanyPMO_.NET.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyPMO_.NET.Models.Employee", "TaskCreator")
                        .WithMany()
                        .HasForeignKey("TaskCreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("TaskCreator");
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.Company", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Images");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.Employee", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.Project", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("CompanyPMO_.NET.Models.Task", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Issues");
                });
#pragma warning restore 612, 618
        }
    }
}
